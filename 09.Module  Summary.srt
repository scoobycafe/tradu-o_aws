1
00:00:00,599 --> 00:00:06,726
Alright then, so let's draw a picture of what we've learned. So starting out from a base of a VPC 

2
00:00:06,826 --> 00:00:12,726
and a couple of subnets in a single availability zone, first up we created an internet gateway, 

3
00:00:12,826 --> 00:00:19,726
effectively a router with an interface into our VPC and another one facing the internet. 

4
00:00:19,826 --> 00:00:24,726
And it only took like a couple of clicks to create, thanks for that Amazon. 

5
00:00:24,826 --> 00:00:31,726
But don't let that fool you. Remember, this beast scales like a reptile and it promises to still be standing 

6
00:00:31,826 --> 00:00:38,726
as the sun turns supernova. So it's pretty decent and no need for us to sweat over its performance or its 

7
00:00:38,826 --> 00:00:44,726
availability characteristics, assuming you trust Amazon, of course. 

8
00:00:44,826 --> 00:00:48,726
Anyway the fact is it gives us a reliable way out to the internet. 

9
00:00:48,826 --> 00:00:54,726
Then we updated the route table associated with our public subnet so that it knew about the internet gateway, yeah, 

10
00:00:54,826 --> 00:01:03,726
we used 0.0.0.0/0 plus the internet gateway as a default route for the subnet. 

11
00:01:03,826 --> 00:01:08,726
So the route to take when nothing else matches what you want. Then after that we saw how to assign public IPs 

12
00:01:08,826 --> 00:01:16,726
to instances, either manually when launching the instance or by setting the auto-assign public IP property 

13
00:01:16,826 --> 00:01:22,726
of the subnet. But don't forget, you don't own those types of public addresses, so they don't stick around 

14
00:01:22,826 --> 00:01:28,726
after reboot, making them no good for any time where you might need a persistent IP address that maybe 

15
00:01:28,826 --> 00:01:34,726
you publish to your clients and the likes. For reliable IPs that you do own and that you pay for 

16
00:01:34,826 --> 00:01:41,726
when they're not in use, you want to go with elastic IPs. These are still full of public routable goodness, 

17
00:01:41,826 --> 00:01:46,726
but they belong to you so they're not going to bail out on you when the goes gets tough. 

18
00:01:46,826 --> 00:01:52,726
And that pretty there is public subnets in the internet. So after we were done with that, we switched our attention 

19
00:01:52,826 --> 00:02:01,726
to our private subnet and we gave it the gift of internet access, but through a proxy host in the form of NAT instance 

20
00:02:01,826 --> 00:02:06,726
that we stuck in the public subnet. This is just like a Linux instance, right, that forwards packets 

21
00:02:06,826 --> 00:02:12,726
onto the internet for us and it wasn't even hard to build. We grabbed one from the community marketplace. 

22
00:02:12,826 --> 00:02:17,726
Sure we have to disable source and destination checks and we added a default route to the route table 

23
00:02:17,826 --> 00:02:25,726
in the private subnet, so an entry that sent all unmatched traffic over to the NAT instance, but that wasn't hard. 

24
00:02:25,826 --> 00:02:28,726
You know what? I reckon that's pretty much what we did in this module. 

25
00:02:28,826 --> 00:02:34,726
Cracking stuff, right? I mean, that diagram is starting to look pretty decent now, don't you think? 

26
00:02:34,826 --> 00:02:38,726
Almost like a real data center. Oh I'm not kidding, this is good stuff now. 

27
00:02:38,826 --> 00:02:44,726
None of this old EC2 classic style stuff where we had no control over networking and the likes, no way, 

28
00:02:44,826 --> 00:02:50,726
this is proper good stuff that we're building here. Anyway, next on the fight card 

29
00:02:50,826 --> 00:02:55,726
is security groups and network access control lists, more good stuff. 

30
00:02:55,826 --> 00:03:02,726
What we're about to do is start building a solid layered security model to give us even better control 

31
00:03:02,826 --> 00:03:06,826
of our infrastructure. You're not going to want to miss that. 


